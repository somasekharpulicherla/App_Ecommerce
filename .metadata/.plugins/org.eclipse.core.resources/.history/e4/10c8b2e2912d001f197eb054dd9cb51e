package com.ecommerce.AppEcommerce.user.controller;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ecommerce.AppEcommerce.globalExceptions.GlobalApplicationRuntimeException;
import com.ecommerce.AppEcommerce.springsecurityjwt.JwtUtil;
import com.ecommerce.AppEcommerce.user.entities.User;
import com.ecommerce.AppEcommerce.user.exceptions.EmailAlreadyExistsException;
import com.ecommerce.AppEcommerce.user.exceptions.InvalidCredentialsException;
import com.ecommerce.AppEcommerce.user.exceptions.UserNotFoundException;
import com.ecommerce.AppEcommerce.user.exceptions.UsernameAlreadyExistsException;
import com.ecommerce.AppEcommerce.user.requestResponses.AddUserRequest;
import com.ecommerce.AppEcommerce.user.requestResponses.AddUserResponse;
import com.ecommerce.AppEcommerce.user.requestResponses.UserForgetPasscodeRequest;
import com.ecommerce.AppEcommerce.user.requestResponses.UserForgetPasscodeResponse;
import com.ecommerce.AppEcommerce.user.requestResponses.UserLoginRequest;
import com.ecommerce.AppEcommerce.user.requestResponses.UserLoginResponse;
import com.ecommerce.AppEcommerce.user.requestResponses.UserValidateOtpRequest;
import com.ecommerce.AppEcommerce.user.requestResponses.UserValidateOtpResponse;
import com.ecommerce.AppEcommerce.user.service.UserService;

import jakarta.validation.Valid;

@RestController
@RequestMapping("/user")
public class UserController {
	
    private static final Logger log = LoggerFactory.getLogger(UserController.class);

	
	@Autowired
	private UserService userService;
	
	@Autowired
    private AuthenticationManager authenticationManager;

    @Autowired
    private JwtUtil jwtUtil;
	
    @GetMapping("/hello")
    public ResponseEntity<String> hello() {
        return ResponseEntity.ok("Hello, authenticated user!");
    }
	
	@PostMapping("/add")
	public ResponseEntity<AddUserResponse> addUser(@Valid @RequestBody AddUserRequest addUserRequest,BindingResult bindingResult){
		 if (bindingResult.hasErrors()) {
	            Optional<FieldError> e= bindingResult.getFieldErrors().stream().findFirst();
	 	        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new AddUserResponse("Unable to add User!",null,e.get().getField()+":"+e.get().getDefaultMessage()));
		 }
		long startTime = System.currentTimeMillis();
	    Optional<AddUserResponse> addUserResponse= userService.addUser(addUserRequest);
	    log.info("Total time taken method addUser: " +(System.currentTimeMillis()-startTime) + " milliseconds");
		return ResponseEntity.status(HttpStatus.CREATED).body(addUserResponse.get());
	}
	
	

	@PostMapping("/login")
	public ResponseEntity<UserLoginResponse> userLogin(@Valid @RequestBody UserLoginRequest userLoginRequest,BindingResult bindingResult){
		 if (bindingResult.hasErrors()) {
	            Optional<FieldError> e= bindingResult.getFieldErrors().stream().findFirst();
	 	        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new UserLoginResponse("User unable to login in!", false,null,e.get().getField()+":"+e.get().getDefaultMessage()));
		 }
		 
		 
		 
		 
		long startTime = System.currentTimeMillis();
	    Optional<UserLoginResponse> userLoginResponse= userService.userLogin(userLoginRequest);
	    
	    try {
            authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(userLoginRequest.getUsernameOrEmail(), userLoginRequest.getPasscode())
            );
        } catch (Exception e) {
        	log.error(" authenticationManager controller inside:"+e);
        }
	    
        final String jwt = jwtUtil.generateToken(userLoginResponse.get().getUser().getUsername());
        userLoginResponse.get().setJwt(jwt);
	    log.info("Total time taken method userLogin: " +(System.currentTimeMillis()-startTime) + " milliseconds");
		return ResponseEntity.status(HttpStatus.OK).body(userLoginResponse.get());
	}
	
	@PostMapping("/forgetpasscode")
	public ResponseEntity<UserForgetPasscodeResponse> userForgetPassword(@Valid @RequestBody UserForgetPasscodeRequest userForgetPasscodeRequest,BindingResult bindingResult){
		 if (bindingResult.hasErrors()) {
	            Optional<FieldError> e= bindingResult.getFieldErrors().stream().findFirst();
	 	        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new UserForgetPasscodeResponse("Unable to forget passcode!",e.get().getField()+":"+e.get().getDefaultMessage()));
		 }
		long startTime = System.currentTimeMillis();
	    Optional<UserForgetPasscodeResponse> userForgetPasscodeResponse= userService.forgetPasscode(userForgetPasscodeRequest);
	    log.info("Total time taken method userForgetPassword: " +(System.currentTimeMillis()-startTime) + " milliseconds");
		return ResponseEntity.status(HttpStatus.OK).body(userForgetPasscodeResponse.get());
	}
	
	@PostMapping("/validateotp")
	public ResponseEntity<UserValidateOtpResponse> userValidateOtp(@Valid @RequestBody UserValidateOtpRequest userValidateOtpRequest,BindingResult bindingResult){
		 if (bindingResult.hasErrors()) {
	            Optional<FieldError> e= bindingResult.getFieldErrors().stream().findFirst();
	 	        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new UserValidateOtpResponse("User Unable to Validate OTP!",e.get().getField()+":"+e.get().getDefaultMessage()));
		 }
		long startTime = System.currentTimeMillis();
	    Optional<UserValidateOtpResponse> userValidateOtpResponse= userService.userValidateOtp(userValidateOtpRequest);
	    log.info("Total time taken method userLogin: " +(System.currentTimeMillis()-startTime) + " milliseconds");
		return ResponseEntity.status(HttpStatus.OK).body(userValidateOtpResponse.get());
	}
	
	
	

	   @ExceptionHandler(InvalidCredentialsException.class)
	   public ResponseEntity<?> handleInvalidCredentialsException(InvalidCredentialsException ex) {
	       return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new UserLoginResponse("InCorrect User Credentials!", false,null,ex.getMessage()));
	   }
	   

	   @ExceptionHandler(UserNotFoundException.class)
	   public ResponseEntity<?> handleUserNotFoundException(UserNotFoundException ex) {
	       return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new UserLoginResponse("User not Found!", false,null,ex.getMessage()));
	   }
	   
	
	   @ExceptionHandler(EmailAlreadyExistsException.class)
	   public ResponseEntity<?> handleEmailAlreadyExistsException(EmailAlreadyExistsException ex) {
	       return ResponseEntity.status(HttpStatus.CONFLICT).body(new AddUserResponse("Unable to add User!", null,ex.getMessage()));
	   }
	   
	   @ExceptionHandler(UsernameAlreadyExistsException.class)
	   public ResponseEntity<?> handleUsernameAlreadyExistsException(UsernameAlreadyExistsException ex) {
	       return ResponseEntity.status(HttpStatus.CONFLICT).body(new AddUserResponse("Unable to add User!", null,ex.getMessage()));
	   }
	   
	   @ExceptionHandler(GlobalApplicationRuntimeException.class)
	   public ResponseEntity<?> handleGlobalApplicationRuntimeException(GlobalApplicationRuntimeException ex) {
	       return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(new AddUserResponse("Inconvenience occured!", null,ex.getMessage()));
	   }

}
