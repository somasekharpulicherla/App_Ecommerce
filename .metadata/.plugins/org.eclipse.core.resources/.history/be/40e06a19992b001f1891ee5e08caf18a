package com.ecommerce.AppEcommerce.user.entities;

import java.time.LocalDate;


import com.ecommerce.AppEcommerce.user.enums.Gender;
import com.fasterxml.jackson.annotation.JsonFormat;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Past;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.Accessors;

@Entity
@Table(name="user_m")
@Data
public class User {
	
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int id;
	
	private String firstName;

	private String lastName;
	
    private LocalDate dob; 
	
	@Enumerated(EnumType.STRING)
	private Gender gender;
	
	
	@NotBlank(message="username can not be blank")
	@Size(min = 3, max = 50, message = "First Name must be between 3 and 50 characters")
	@Pattern(regexp = "^[a-zA-Z0-9]*$", message = "Username must contain only alphabets and numbers")
	@Column(unique = true, nullable = false)
    private String username;
	
	
	@Email(message="Email must be valid")
	@NotBlank(message="Email can not be blank")
	@Column(unique = true, nullable = false)
	private String email;
	
	@NotBlank(message="Passcode can not be blank")
	@Size(min = 8, max = 50, message = "Passcode must be between 3 and 50 characters")
	@Pattern(regexp = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]*$",
    message = "Passcode must contain at least one uppercase, one lowercase, one digit, one special characters")
	private String passcode;
	
	@Pattern(regexp = "^[6-9]\\d{9}$", message = "Phone number must be 10 digits and start with 6, 7, 8, or 9")
	@NotBlank(message="Phone number can not be blank")
	private String phone;

}
